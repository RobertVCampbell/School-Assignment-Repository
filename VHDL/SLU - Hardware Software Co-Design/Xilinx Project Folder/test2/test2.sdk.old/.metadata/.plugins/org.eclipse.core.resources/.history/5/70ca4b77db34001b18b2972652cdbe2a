/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <xil_io.h>
#include "platform.h"
#include "xil_printf.h"

#define MYAXI 0x44a00000

int main()
{
    //MYAXI+4 is reading in from hardware at the last written address
    //MYAXI+0 is writing out

    init_platform();

    //unsigned int array[16];
    //unsigned int out = 0x00000000;
    //unsigned int in = 0x00000000;


    uint32_t control, data_f, res_f, sample; // & with input to check flags
    uint32_t storage[10];
    int n = 10, x = 0; //n is desired number of readings, x is readings taken

    while(x < n){
    	control = xil_in32(MYAXI+4);
    	res_f = control & 0x40000000;

    	while(res_f != 0){
    		xil_out32(MYAXI+0, 0xC0000000);
    		control = xil_in32(MYAXI+4);
    		data_f = control & 0x20000000;
    		res_f = control & 0x40000000;

    		while((data_f == 0)&(res_f != 0)){
    			control = xil_in32(MYAXI+4);
    			data_f = control & 0x20000000;
    			res_f = control & 0x40000000;
    		}
    		if(res_f != 0){
    			control = xil_in32(MYAXI+4);
    			sample = control & 0x0000FFFF;
    			storage[x] = sample;
    			x++;
    			xil_out32(MYAXI+0, 0x40000000);
    		}

    	}
    }
    //Calculate sum from stored values
    uint32_t sum = 0, avg = 0;
    for(i = 0; i < 10; i++){
    	//res_f = xil_in32(MYAXI+4) & 0x40000000;
    	sum += storage[i];
    	xil_printf("Storage has: %lf, Sum is: %lf", storage[i], sum);
    }
    avg = sum / n;
    //Convert to celcius
    avg *= 0.02;
    avg -= 273.15;
    xil_printf("Average was: %lf", avg);
    //Translate sum into digits
    uint32_t temp;
    avg *= 100;





//    int target;
//    uint32_t div;
//
//
//	target = 1;
//	while(1){
//
//		for(target=1; target < 102; target = target +10)
//		{	div = 100000000 / target;
//			Xil_Out32(MYAXI+0, div);
//			xil_printf("Frequency %d Hz:\r\n", target);
//			for(int j = 0; j<32000; j++){
//				for(int k=0; k<3200; k++){}
//				}
//			}
//	    }




    //This AXI has 4 32-bit registers
    //Writing the register number to each register
    //MYAXI+0 is writing to HW
    //Formatted as 0bXXXX XXXX XXXrd_n a3a2a1a0 d15-d12 d11-d8 d7-d4 d3-d0
    //write would be OR 0x00100000
    //read would be AND 0xFFEFFFFF



    /* Vestigial demo code for writing to registers
    Xil_Out32(MYAXI+0, 0x00);
    Xil_Out32(MYAXI+4, 0x01);
    Xil_Out32(MYAXI+8, 0x02);
    Xil_Out32(MYAXI+12, 0xa3);*/

    //Checks and outputs initial memory values
    //Stores initial memory values in the array
    /*xil_printf("Initial memory values:\r\n");
    for(int i = 0; i < 16; i++){
    	Xil_Out32(MYAXI+0, out);
    	xil_printf("Memory address %d: %ld\r\n", i, Xil_In32(MYAXI+4));
    	array[i] = (Xil_In32(MYAXI+4));
//    	xil_printf("Array position %d: %ld\r\n", i, array[i]);
    	out = out + 0x00010000;
    }
    xil_printf("Imported Array values:\r\n");
    //Print just the array
    for (int i = 0; i<16; i++){
    	xil_printf("Array position %d: %ld\r\n", i, array[i]);
    }


    //Configuring the output to write
    //Will write integer of address+1 to memory
    out = 0x00100001;
    for(int i = 0; i < 16; i++){
        	Xil_Out32(MYAXI+0, out);
        	out = out + 0x00010001;
        }



    //Read the values back into the software array
    out = 0x00000000;
    xil_printf("New memory values:\r\n");
    for(int i = 0; i < 16; i++){
        	Xil_Out32(MYAXI+0, out);
        	xil_printf("Memory address %d: %ld\r\n", i, Xil_In32(MYAXI+4));
        	array[i] = (Xil_In32(MYAXI+4));
//        	xil_printf("Array position %d: %ld\r\n", i, array[i]);
        	out = out + 0x00010000;
        }

    //Print just the array
    xil_printf("New Array Values:\r\n");
    for (int i = 0; i<16; i++){
        	xil_printf("Array position %d: %ld\r\n", i, array[i]);
        }
    /*int i=0;
    while(1){
    	Xil_Out32(MYAXI+0,i);
    	for(int j = 0; j<32000; j++){
    		for(int k=0; k<320; k++){}
    	}
    	i++;
    }* /
*/
    cleanup_platform();
    return 0;
}
